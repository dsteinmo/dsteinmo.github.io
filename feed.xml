<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://dsteinmo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dsteinmo.github.io/" rel="alternate" type="text/html" /><updated>2017-12-26T10:28:51-05:00</updated><id>https://dsteinmo.github.io/</id><title type="html">Derek Steinmoeller’s GitHub blog</title><subtitle>A simple blog site for blogging about dsteinmo's GitHub projects.</subtitle><entry><title type="html">A new blog and a C++ project in its infancy</title><link href="https://dsteinmo.github.io/blitzdg/update/2017/12/26/welcome-to-dsteinmo-blog.html" rel="alternate" type="text/html" title="A new blog and a C++ project in its infancy" /><published>2017-12-26T06:59:15-05:00</published><updated>2017-12-26T06:59:15-05:00</updated><id>https://dsteinmo.github.io/blitzdg/update/2017/12/26/welcome-to-dsteinmo-blog</id><content type="html" xml:base="https://dsteinmo.github.io/blitzdg/update/2017/12/26/welcome-to-dsteinmo-blog.html">&lt;p&gt;I recently started a project written in C++ called blitzdg. It’s a spin-off from my PhD work on discontinuous Galerkin (dg) methods and my goal is to do it &lt;em&gt;the right way&lt;/em&gt; with MPI for distributed parallelism.&lt;/p&gt;

&lt;p&gt;I’m learning a lot about the various academic C libraries out there like &lt;code class=&quot;highlighter-rouge&quot;&gt;METIS&lt;/code&gt; for mesh partitioning and &lt;code class=&quot;highlighter-rouge&quot;&gt;UMFPACK&lt;/code&gt; for sparse matrix solvers. I’m also learning about the power of C++ that is unleashed by &lt;code class=&quot;highlighter-rouge&quot;&gt;boost&lt;/code&gt; which adds loads of functionality!&lt;/p&gt;

&lt;p&gt;My industrial work experience has familiarized me with build automation tools and continuous integration (CI) platforms. &lt;code class=&quot;highlighter-rouge&quot;&gt;blitzdg&lt;/code&gt; uses &lt;a href=&quot;https://travis-ci.org/dsteinmo/blitzdg&quot;&gt;travis-ci&lt;/a&gt; for CI, and good old-fashioned GNU Make for its build. I’ve also integrated &lt;a href=&quot;https://coveralls.io/github/dsteinmo/blitzdg&quot;&gt;coveralls&lt;/a&gt; for tracking the percentage of code covered by the unit tests as the project matures.&lt;/p&gt;

&lt;p&gt;I won’t go too deep into the project’s code right now, but as a starting point, here’s a call out to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UMFPACK&lt;/code&gt; C library for factorizing a compressed sparse matrix with pre-computed numeric factors LU.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Solving Ax = b..&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;umfpack_di_solve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UMFPACK_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Done.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the project’s repoitory at &lt;a href=&quot;https://github.com/dsteinmo/blitzdg/&quot;&gt;https://github.com/dsteinmo/blitzdg/&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">I recently started a project written in C++ called blitzdg. It’s a spin-off from my PhD work on discontinuous Galerkin (dg) methods and my goal is to do it the right way with MPI for distributed parallelism.</summary></entry></feed>